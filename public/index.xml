<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Visionbike - Personal Blog of CV | DSP | ML notes</title>
    <link>http://visionbike.github.io/</link>
    <description>Recent content on Visionbike - Personal Blog of CV | DSP | ML notes</description>
    <image>
      <url>http://visionbike.github.io/images/apple-touch-icon.png</url>
      <link>http://visionbike.github.io/images/apple-touch-icon.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 13 Jul 2023 16:44:33 +0800</lastBuildDate><atom:link href="http://visionbike.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Create Machine Learning Development Environment on Windows 11 With WSL 2</title>
      <link>http://visionbike.github.io/posts/create-ml-development-environment-on-windows11-with-wsl2/</link>
      <pubDate>Thu, 13 Jul 2023 16:44:33 +0800</pubDate>
      
      <guid>http://visionbike.github.io/posts/create-ml-development-environment-on-windows11-with-wsl2/</guid>
      <description>To get started with running CUDA on WSL, you need to instal NVIDIA Driver on Windows 11 with a compatible GeForce or NVIDIA RTX/Quadro card from this link.
Note that you only need to install NVIDIA Driver for Windows. Do not install any Linux Driver in WSL.
The latest NVIDIA Windows GPU Driver will fully support WSL 2. With CUDA support in the driver, existing applications compiled on a Linux system for the same target GPU can run unmodified within the WSL environment.</description>
      <content:encoded><![CDATA[<p>To get started with running CUDA on WSL, you need to instal NVIDIA Driver on Windows 11 with a compatible GeForce or NVIDIA RTX/Quadro card from this <a href="https://www.nvidia.com/Download/index.aspx">link</a>.</p>
<p>Note that you <strong>only need to install NVIDIA Driver for Windows. Do not install any Linux Driver in WSL</strong>.</p>
<p>The latest NVIDIA Windows GPU Driver will fully support WSL 2. With CUDA support in the driver, existing applications compiled on a Linux system for the same target GPU can run unmodified within the WSL environment. Once NVIDIA Windows GPU Driver is installed in the system, the CUDA driver will be stubbed inside the WSL 2 as <code>libcuda.so</code>. Therefore, you only use a separate CUDA Toolkit for WSL 2 which does not contain the NVIDIA Linux GPU Driver.</p>
<h2 id="1-install-nvidia-cuda-toolkit-for-wsl-2">1. Install NVIDIA CUDA Toolkit for WSL 2</h2>
<p>First remove the old GPG key from your WSL machine</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">sudo apt-key del 7fa2af80
</code></pre></div><p>Download <a href="https://developer.nvidia.com/cuda-downloads?target_os=Linux&amp;target_arch=x86_64&amp;Distribution=WSL-Ubuntu&amp;target_version=2.0&amp;target_type=deb_local">CUDA Toolkit for WSL 2</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">wget https://developer.download.nvidia.com/compute/cuda/repos/wsl-ubuntu/x86_64/cuda-wsl-ubuntu.pin
sudo mv cuda-wsl-ubuntu.pin /etc/apt/preferences.d/cuda-repository-pin-600
wget https://developer.download.nvidia.com/compute/cuda/12.2.1/local_installers/cuda-repo-wsl-ubuntu-12-2-local_12.2.1-1_amd64.deb
</code></pre></div><p>Then, folow the installation instruction.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">sudo dpkg -i cuda-repo-wsl-ubuntu-12-2-local_12.2.1-1_amd64.deb
sudo cp /var/cuda-repo-wsl-ubuntu-12-2-local/cuda-*-keyring.gpg /usr/share/keyrings/
sudo apt-get update
sudo apt-get -y install cuda
</code></pre></div><p>Verify that CUDA is successfully installed by command</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">nvidia-smi
</code></pre></div><h2 id="2-install-nvidia-cudnn">2. Install NVIDIA CuDNN</h2>
<p>You can find the coresponding installation file from <a href="https://developer.nvidia.com/rdp/cudnn-archive">this</a>. Here you need to register and login to download it.</p>
<p><img loading="lazy" src="/posts/create-ml-development-environment-on-windows11-with-wsl2/cudnn-download.png" type="" alt="CuDNN download"  /></p>
<p>You can use Windows to download installation files then move to Ubuntu system in WSL 2. The WSL system is mapped to <code>\\wsl$\Ubuntu-22.04</code> and Windows drives are mounted under <code>/mnt</code> and can be accessed directly.</p>
<p>Once completed, it can be installed with following commands</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">sudo dpkg -i cudnn-local-repo-ubuntu2204-8.9.3.28_1.0-1_amd64.deb
sudo cp /var/cudnn-local-repo-ubuntu2204-8.9.3.28/cudnn-local-*-keyring.gpg /usr/share/keyrings/
sudo apt-get -y update
sudo apt-get -y upgrade
</code></pre></div><details class="admonition tip"><summary class="admonition-title">Fix &#34;libcuda.so.1 is not a symbolic link&#34; error</summary>
<p>Once the installattion is completed, you may receive the following error:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">/sbin/ldconfig.real: /usr/lib/wsl/lib/libcuda.so.1 is not a symbolic link
</code></pre></div><p>The reason may be the property of read-only of the directory. You can create other directory then link executable from <code>/usr/lib/wsl/lib/</code> to the new directory.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">cd</span> /usr/lib/wsl
sudo mkdir lib2
sudo ln -s lib/* lib2
sudo ldconfig
</code></pre></div><p>Then change <code>/usr/lib/wsl/lib</code> in the file <code>/etc/ld.so.conf.d/ld.wsl.conf</code> to <code>/usr/lib/wsl/lib2</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># This file was automatically generated by WSL. To stop automatic generation of this file, add the following entry to /etc/wsl.conf:</span>
<span class="c1">#[automount]</span>
<span class="c1">#ldconfig = false</span>
/usr/lib/wsl/lib2
</code></pre></div><p>Restarting WSL after setting will automatically restore, if you donâ€™t want to restore, you need to modif <code>/etc/wsl.conf</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="o">[</span>automount<span class="o">]</span>
<span class="nv">ldconfig</span> <span class="o">=</span> <span class="nb">false</span>
</code></pre></div></details>
<h2 id="3-set-up-python-environment-using-mambaforge">3. Set up Python environment using Mambaforge</h2>
<p>Python environment allows to manage separatelly different installations of Python and modules. It is useful when you have many projects running different version of Python and modules. It also help to manage installed modules for publish or reproduce.</p>
<p>There are different ways to create a python virtual environment, including built-in <code>venv</code>, <code>Conda</code> and <code>Anaconda</code>.</p>
<p><code>Conda</code> is a packaging tool and installer that aims to handle library dependencies outside of the Python packages as well as the Python packages themselves. For non preinstalled package manager, <code>Miniconda</code>, an installation of Conda, will be a good option.</p>
<p><code>Anacond</code>a is an installation of Conda that comes pre-loaded with a bunch of packages for scientific computing, i.e., <code>numpy</code>, <code>matplotlib</code>, <code>scipy</code>, etc. It also comes with IDE, Jupyter notebooks out of the box. This is helpful for beginers, but doesn&rsquo;t give much control.</p>
<p><code>Mamba</code> is a package manager which can be used with Python. Unlike <code>Conda</code>, it uses the C/C++ implementation to speed up the package installation. Read more about <code>mamba</code> in <a href="https://focalplane.biologists.com/2022/12/08/managing-scientific-python-environments-using-conda-mamba-and-friends/">here</a>. To install <code>mamba</code>, access <a href="https://github.com/conda-forge/miniforge">its repo</a> and pick the Mabaforge installer for your operating system.</p>
<p>Remember to run <code>conda init</code> at the end of your installation in your shell to activate the <code>mamba</code> command.</p>
<p><img loading="lazy" src="/posts/create-ml-development-environment-on-windows11-with-wsl2/mambaforge-install.png" type="" alt="Mambaforge install"  /></p>
<h3 id="create-and-use-virtual-environments">Create and use virtual environments</h3>
<p>The command using <code>mamba</code> is similar to the <code>conda</code> command.</p>
<ul>
<li>Create new environment</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">mamba create -n &lt;envname&gt; <span class="nv">python</span><span class="o">=</span>&lt;version&gt;
</code></pre></div><ul>
<li>Activate an environment</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">mamba activate &lt;envname&gt;
</code></pre></div><ul>
<li>Deactivate environment</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">mamba deactivate
</code></pre></div><ul>
<li>Delete an environment</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">mamba env remove -n &lt;envname&gt;
</code></pre></div><ul>
<li>Show all created environments</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">mamba env list
</code></pre></div><h3 id="working-with-python-packages">Working with Python packages</h3>
<p><strong>Remember to activate an environment first, do not install any packages in your base environment!</strong></p>
<ul>
<li>Install python packages</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">mamba install &lt;package&gt;<span class="o">[=</span>version<span class="o">]</span> <span class="o">[</span>-c &lt;channelname&gt;<span class="o">]</span>
</code></pre></div><p>When installing a package, you can optionally indicate specific additional channel that the packages are posted by community. <code>conda-forge</code> is one of most common additional channels.</p>
<ul>
<li>Delete packages</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">mamba remove &lt;package&gt;
</code></pre></div><ul>
<li>Show all installed packages in the virtual environment</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">mamaba list <span class="o">[</span>-n &lt;envname&gt;<span class="o">]</span>
</code></pre></div><h2 id="reference">Reference</h2>
<ul>
<li><a href="https://medium.com/geekculture/install-cuda-and-cudnn-on-windows-linux-52d1501a8805">Install CUDA and CUDNN on Windows &amp; Linux</a>.</li>
<li><a href="https://docs.nvidia.com/cuda/wsl-user-guide/index.html">CUDA on WSL User Guide</a>.</li>
<li><a href="https://visualstudio.microsoft.com/free-developer-offers/">Machine learning environment build: WLS2+Ubuntu+CUDA+cuDNN</a>.</li>
<li><a href="https://biapol.github.io/blog/mara_lampert/getting_started_with_mambaforge_and_python/readme.html">Getting started with Mambaforge and Python</a>.</li>
<li><a href="https://ross-dobson.github.io/posts/2021/01/setting-up-python-virtual-environments-with-mambaforge/">Tutorial: Setting up Python enviroments with Mambaforge</a>.</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Working With Windows Subsystem for Linux 2 on Windows 11</title>
      <link>http://visionbike.github.io/posts/working-with-wsl2-on-windows11/</link>
      <pubDate>Thu, 13 Jul 2023 01:35:45 +0800</pubDate>
      
      <guid>http://visionbike.github.io/posts/working-with-wsl2-on-windows11/</guid>
      <description>Windows Subsystem for Linux (WSL) is a compatibility layer provided by Microsoft that allows you to run a Linux environment directly on your Windows operating system. It enables you to execute Linux binaries, use Linux command-line tools, and access Linux file systems from within Windows.
When it comes to machine learning (ML) development, WSL offers several advantages:
  Linux Compatibility: Many ML frameworks, libraries, and tools are primarily developed and optimized for Linux systems.</description>
      <content:encoded><![CDATA[<p><strong>Windows Subsystem for Linux (WSL)</strong> is a compatibility layer provided by Microsoft that allows you to run a Linux environment directly on your Windows operating system. It enables you to execute Linux binaries, use Linux command-line tools, and access Linux file systems from within Windows.</p>
<p>When it comes to machine learning (ML) development, WSL offers several advantages:</p>
<ol>
<li>
<p><strong>Linux Compatibility</strong>: Many ML frameworks, libraries, and tools are primarily developed and optimized for Linux systems. By using WSL, you can seamlessly run Linux-specific ML software on your Windows machine without the need for dual-booting or setting up a separate Linux machine.</p>
</li>
<li>
<p><strong>Access to Linux Packages</strong>: WSL provides access to the extensive collection of Linux packages available in various package managers (e.g., APT, YUM, and others). This allows you to easily install and manage Linux dependencies required for your ML projects.</p>
</li>
<li>
<p><strong>Command-Line Tools and Scripts</strong>: ML development often involves working with command-line tools and executing scripts. WSL provides a Linux shell environment, enabling you to run Linux commands and scripts directly on your Windows machine. This ensures compatibility and smooth execution of ML workflows that rely on Linux-specific commands and scripts.</p>
</li>
<li>
<p><strong>Compatibility with Docker</strong>: Docker is widely used in ML development to create isolated environments for running ML applications. WSL provides a seamless integration with Docker, allowing you to run Linux-based Docker containers on your Windows machine without any performance overhead.</p>
</li>
<li>
<p><strong>Consistency across Development Environments</strong>: If you work in a team where some members use Linux for ML development, using WSL allows you to maintain consistency across different development environments. It ensures that code, scripts, and configurations work consistently regardless of the underlying operating system.</p>
</li>
</ol>
<p>By utilizing WSL, you can leverage the power of Linux for ML development while enjoying the convenience of working within the Windows environment. It bridges the gap between Windows and Linux, making it easier to set up and manage a Linux-based ML environment on your Windows machine.</p>
<p>It is important to note that WSL is available in different versions, such as WSL 1 and WSL 2. WSL 2 offers enhanced performance and better integration with the Windows system, making it the recommended choice for ML development. The WSL 2 is fully integrated in Windows 10 build 19041 or Windows 11, so you may consider upgrade your system before install it.</p>
<div class="admonition tip"><p class="admonition-title">Check Windows Version</p>
<p>You can check Window version by going to <strong>Settings &gt; System &gt; About</strong> and scroll down to <strong>Windows specifications</strong>.</p>
</div>
<p>If you plan to work with Linux-based ML frameworks, libraries, or tools, using WSL can significantly streamline your development workflow and ensure compatibility with the wider ML community.</p>
<h2 id="1-pc-requirements">1. PC Requirements</h2>
<p>WSL 2 uses <strong>Hyper-V</strong> which requires harware virtualization support enabled in your BIOS. To ensure the hardware virtualization is available on your device, you can check by rebooting, pressing <code>DEL</code>, <code>F2</code> or <code>F10</code> (depending on the hardware manufacture) to open the BIOS pannels. Lokking for <strong>Virtualization Technology</strong>, <strong>VTx</strong>, <strong>Secure Virtual Machine (SVM)</strong> or similar options and ensure these options enabled, then reboot the machine.</p>
<details class="admonition info"><summary class="admonition-title">Disable Fast Start-up (Optional)</summary>
<p>Fast start-up saves Windows session and device drivers to a file so the next boot become faster. However, this can cause problems for Linux kernel, which may unresponsive on the next boost. If you encounter this problem, you can disable tthe fast start-up option by <strong>Control Panel &gt; Power Options &gt; Choose what the power buttons do &gt; Change settings that are currently unavailable</strong></p>
<p><img loading="lazy" src="/posts/working-with-wsl2-on-windows11/power-option.png" type="" alt="Power options"  /></p>
</details>
<h2 id="2-install-docker-desktop">2. Install Docker Desktop</h2>
<p><strong>Docker Desktop</strong> with WSL 2 provides an efficient and seamless integration between Docker containers and the WSL 2 environment. This combination allows you to run Linux containers directly on your Windows system, leveraging the power of WSL 2.</p>
<p>If you haven&rsquo;t installed Docker Desktop yet, please download and install the Docker Desktop for Windows from the <a href="https://www.docker.com/products/docker-desktop/">Docker website</a>. Installing Docker Desktop on Windows enables docker and docker-compose in both Windows and WSL 2.</p>
<p>Docker Desktop suggests you use WSL 2 when it&rsquo;s first launched. Alternatively, you can select <strong>Settings</strong> from the Docker system tray icon menu, then choose the <strong>General</strong> tab, check <strong>Use the WSL 2 based engine</strong>, and hit <strong>Apply &amp; Restart</strong>. Docker uses the default Linux distro, but you can also enable it in other installed distros from the <strong>WSL Integration</strong> panel in <strong>Settings</strong>, then <strong>Resources</strong>.</p>
<p><img loading="lazy" src="/posts/working-with-wsl2-on-windows11/docker-setting.png" type="" alt="Docker Settings"  /></p>
<p>Once Docker Desktop is installed, you can verify that it is running correctly by following command from <code>PowerShell</code> or <code>Command Prompt</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ps" data-lang="ps"><span class="nf">docker</span> <span class="nf">version</span>
</code></pre></div><p>This command displays the Docker version and confirms that Docker is running with WSL 2 integration.</p>
<p>By combining Docker Desktop with WSL 2, you can take advantage of the containerization capabilities of Docker while benefiting from the compatibility and performance enhancements of WSL 2. It allows for efficient development and deployment of applications in a Linux environment, even if you&rsquo;re working on a Windows system.</p>
<h2 id="3-install-windows-terminal">3. Install Windows Terminal</h2>
<p><strong>Windows Terminal</strong> is a powerful and customizable terminal application for Windows that provides a modern and feature-rich command-line experience.  It allows you to interact with various shells and command-line tools in a single window, making it convenient for developers and system administrators. It is available from the <strong>Microsoft Store</strong> or it repository at <a href="github.com/microsoft/terminal/">github.com/microsoft/terminal/</a>.</p>
<p>Windows Terminal automatically adds WSL 2 Linux distros when they&rsquo;re installed and offers a configurable range of options including tabs, split views, themes, transparency, and key bindings.</p>
<h2 id="4-install-windows-subsystem-for-linux-2-wsl-2">4. Install Windows Subsystem for Linux 2 (WSL 2)</h2>
<p>To display a list of available WSL Linux distros, you can run followinf command in <code>PowerShell</code> in <strong>adminitror mode</strong>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ps" data-lang="ps"><span class="nf">wsl</span> <span class="nf">--list</span> <span class="nf">--online</span>
</code></pre></div><p>To install the default Ubuntu distro (the latest version), run:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ps" data-lang="ps"><span class="nf">wsl</span> <span class="nf">--install</span>
</code></pre></div><p>If you want to install a specific distro by name, such as <code>Ubuntu-22.04</code>, run:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ps" data-lang="ps"><span class="nf">wsl</span> <span class="nf">--install</span> <span class="nf">-d</span> <span class="nf">Ubuntu-22.04</span>
</code></pre></div><details class="admonition tip"><summary class="admonition-title">Install WSL Distros from Microsoft Store</summary>
<p>Alternaltively, you can install Linux distro from the <strong>Microsoft Store</strong>.</p>
<p><img loading="lazy" src="/posts/working-with-wsl2-on-windows11/ms-store-wsl-distros.png" type="" alt="Miscroft Store WSL Linux Distros"  /></p>
</details>
<p>Once the installation is done, you will be prompted to enter a username and password. These are the credentials for Linux administration and completely separately from your Windows username.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">Please create a default UNIX user account. The username does not need to match your Windows username.
For more information visit: https://aka.ms/wslusers
Enter new UNIX username: Visionbike
New password:
Retype new password:
paddwd: password updated successfully
Installation successful!
</code></pre></div><p>Linux will eventually be ready and your terminal will show content similar to:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">To run a <span class="nb">command</span> as administrator <span class="o">(</span>user <span class="s2">&#34;root&#34;</span><span class="o">)</span>, use <span class="s2">&#34;sudo &lt;command&gt;&#34;</span>.
See <span class="s2">&#34;man sudo_root&#34;</span> <span class="k">for</span> details.

Welcome to Ubuntu 22.04.2 LTS <span class="o">(</span>GNU/Linux 5.15.90.1-microsoft-standard-WSL2 x86_64<span class="o">)</span>

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

 * Strictly confined Kubernetes makes edge and IoT secure. Learn how MicroK8s
   just raised the bar <span class="k">for</span> easy, resilient and secure K8s cluster deployment.

   https://ubuntu.com/engage/secure-kubernetes-at-the-edge

This message is shown once a day. To disable it please create the
/home/visionbike/.hushlogin file.
</code></pre></div><p>For the first start, we should to install several Linux updates. The process will depend on the speed of the internet, so be patient if it slow!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">sudo apt update <span class="o">&amp;&amp;</span> sudo apt upgrade
</code></pre></div><p>You can also to check for Linux kernel updates from <code>PowerShell</code> running:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ps" data-lang="ps"><span class="nf">wsl</span> <span class="nf">--update</span>
</code></pre></div><div class="admonition tip"><p class="admonition-title">Verify WSL 2 Installation</p>
<p>To check if the installation was successful, you can run the following command in <code>PowerShell</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ps" data-lang="ps"><span class="nf">wsl</span> <span class="nf">-l</span> <span class="nf">-v</span>
  <span class="nf">NAME</span>                   <span class="nf">STATE</span>           <span class="nf">VERSION</span>
<span class="nf">*</span> <span class="nf">Ubuntu-22.04</span>           <span class="nf">Running</span>         <span class="mf">2</span>
  <span class="nf">docker-desktop</span>         <span class="nf">Stopped</span>         <span class="mf">2</span>
  <span class="nf">docker-desktop-data</span>    <span class="nf">Stopped</span>         <span class="mf">2</span>
</code></pre></div></div>
<h2 id="5-working-with-wsl-2">5. Working with WSL 2</h2>
<h3 id="set-a-default-linux-distribution">Set a Default Linux Distribution</h3>
<p>If you have more than one WSL Linu distro, you need to set the most frequent used distro as a default one. To set the default distro, run the following command in <strong>PowerShell</strong> temrinal.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ps" data-lang="ps"><span class="nf">wsl</span> <span class="nf">--setdefault</span> <span class="p">&lt;</span><span class="nf">DISTRONAME</span><span class="p">&gt;</span>
</code></pre></div><p>where <code>&lt;DISTRONAME&gt;</code> is the distro&rsquo;s name you installed.</p>
<h3 id="file-system-in-wls-2">File System in WLS 2</h3>
<p>In WSL 2, the Linux file system is located within the WSL 2 virtual machine. It provides a Linux-compatible file system hierarchy, including the root directory (<code>/</code>) and various standard directories, such as <code>/home</code>, <code>/usr</code>, and <code>/var</code>. These directories and their subdirectories contain the files and directories specific to the Linux environment.</p>
<p>The WSL 2 file system integration ensures that Linux processes can access and manipulate files stored on the Windows file system. This means you can work with files and directories in both the Linux and Windows environments seamlessly. For example, you can create, modify, and delete files from within WSL 2, and those changes will be reflected in the corresponding Windows directories and vice versa.</p>
<p>Windows drives are mounted in the Linux <code>/mnt/</code> directory. For instance, you can access <code>Users</code> folder a <code>C:\User\</code> by running in WSL terminal:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">cd</span> /mnt/c/Users/
</code></pre></div><p>Noting that accessing Windows files from Linux is considerably slower than using the native Linux file system. Where possible, create projects in the Linux file space, typically in your home folder (<code>/home/&lt;USERNAME&gt;</code> or <code>~</code>).</p>
<p>You can also access WSL 2 files from the network path <code>\\wsl$\</code> in Windows&rsquo;s <strong>File Explorer</strong>.</p>
<p><img loading="lazy" src="/posts/working-with-wsl2-on-windows11/file-explorer.png" type="" alt="File Explorer"  /></p>
<details class="admonition tip"><summary class="admonition-title">Create Linux symbolic link for Windows folder</summary>
<p>For ease of access, you can create a Linux symbolic link to any Windows folder from the terminal. For example, for <code>C:\projects\</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">cd</span> ~
ln -s /mnt/d/projects/
</code></pre></div><p>A <code>projects</code> folder will appear in your Linux home directory. Navigate to it using cd <code>~/project</code> and you&rsquo;ll actually be in <code>/mnt/d/projects/</code>, which maps directly to <code>D:\projects\</code>.</p>
</details>
<h3 id="move-or-clone-your-wsl-linux-disk-image">Move or Clone Your WSL Linux Disk Image</h3>
<p>WSL Linux disk images are installed on your <code>C:</code> drive in deault. This may occupy a lot of space in the Windows&rsquo;s system drive. Optionally, you can either move it to another drive to free up space on <code>C:</code>, or use the same image to create multiple Linux installations (which can be useful <strong>if you need different applications and setups for different projects</strong> - although Docker may be more practical).</p>
<p>Presume that you are moving the Ubuntu Linux distro to <code>D:\wsl</code>. In a <strong>Powershell</strong> terminal, then export Linux distro you want to move by name to a backup <code>.tar</code> file, such as <code>D:\backup\ubuntu-22.04.tar</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ps" data-lang="ps"><span class="nf">mkdir</span> <span class="nf">D:\backup</span>
<span class="nf">wsl</span> <span class="nf">--expoer</span> <span class="nf">Ubuntu-22.04</span> <span class="nf">D:\backup\ubuntu-22.04.tar</span>
</code></pre></div><p>Then, unregister that distro to remove it by name from the <code>C:</code> drive.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ps" data-lang="ps"><span class="nf">wsl</span> <span class="nf">--unregister</span> <span class="nf">Ubuntu-22.04</span>
</code></pre></div><p>You can run <code>wsl -l</code> to verify the distro has been removed. Now, you can import the new WSL 2 distro at another location, such as <code>D:\wsl</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ps" data-lang="ps"><span class="nf">mkdir</span> <span class="nf">D:\wsl</span>
<span class="nf">wsl</span> <span class="nf">--import</span> <span class="nf">Ubuntu-22.04</span> <span class="nf">D:\wsl\</span> <span class="nf">D:\backup\ubuntu-22.04.tar</span>
</code></pre></div><p>You can make any number of named clones from the same back-up by changing the name of distro after <code>--import</code> argument.</p>
<p>Again, verify the WSL distro has been successfully created by <code>wsl -l</code> command. At this point, Ubuntu will use root as the default user. To revert to your own account, run the following command:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ps" data-lang="ps"><span class="nf">ubuntu</span> <span class="nf">config</span> <span class="nf">--default-user</span> <span class="p">&lt;</span><span class="nf">USERNAME</span><span class="p">&gt;</span>
</code></pre></div><p>where <code>&lt;USERNAME&gt;</code> is the username you defined before.</p>
<p>For other distros that aren&rsquo;t the WSL2 default distro, you need to log on to the distro and create/edit <code>/etc/wsl.conf</code> file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">nano /etc/wsl.conf
</code></pre></div><p>Add the following lines to the file</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="o">[</span>user<span class="o">]</span>
<span class="nv">default</span><span class="o">=</span>&lt;USERNAME&gt;
</code></pre></div><p>Save the file, then restart the distro in <strong>PowerShell</strong> terminal.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ps" data-lang="ps"><span class="nf">wsl</span> <span class="nf">--terminate</span> <span class="p">&lt;</span><span class="nf">DISTRONAME</span><span class="p">&gt;</span>
</code></pre></div><p>where <code>&lt;DISTRONAME&gt;</code> is the distro&rsquo;s name you installed. Now you can feel free to delete backup file if you want.</p>
<details class="admonition tip"><summary class="admonition-title">Save &amp; Exit &#34;nano&#34; editor</summary>
<p>To save the file use <code>Ctrl + S</code> combination while <code>Ctrl + X</code> is use to exit the editor in terminal.</p>
</details>
<h3 id="visual-studio-code-with-wsl-2-integration">Visual Studio Code with WSL 2 Integration</h3>
<p><a href="https://code.visualstudio.com/"><strong>Visual Studio Code (VS Code)</strong></a> permits you to use any Windows or Linux terminal. In VS Code, you need to install <strong>WSL</strong> extension (search in <strong>Extensions</strong> tab). The WSL extension enables you to run VS Code within the WSL.</p>
<p><img loading="lazy" src="/posts/working-with-wsl2-on-windows11/wsl-extension.png" type="" alt="WSL extension"  /></p>
<p>When the WSL extension si installed, you will see a new <strong>Remote Status</strong> bar item at the far left.</p>
<p><img loading="lazy" src="/posts/working-with-wsl2-on-windows11/remote-status.png" type="" alt="Remote status"  /></p>
<p>The Remote Status bar item can quickly show you in which context VS Code is running (local or remote).</p>
<p><img loading="lazy" src="/posts/working-with-wsl2-on-windows11/remote-status-activated.png" type="" alt="Remote status activated"  /></p>
<p>To open new remote WSL window, you can press <code>F1</code> to open <strong>Command Pallete</strong> in VS C and type <strong>WSL</strong> to select the option.</p>
<p><img loading="lazy" src="/posts/working-with-wsl2-on-windows11/connect-wsl.png" type="" alt="Connect WSL"  /></p>
<h2 id="conclusion">Conclusion</h2>
<p>Working with WSL 2 on Windows 11 offers an improved experience for running Linux applications. With WSL 2, you can seamlessly integrate Windows and Linux environments, allowing you to develop and execute code using Windows tools while leveraging the power of a Linux-based runtime. This integration simplifies web development, eliminates the need for virtual machines, and provides a more efficient workflow. Overall, WSL 2 on Windows 11 offers the benefits of both operating systems, enhancing productivity and making it easier to work with Linux applications on a Windows platform.</p>
<h2 id="reference">Reference</h2>
<ul>
<li><a href="https://learn.microsoft.com/en-us/windows/wsl/">Windows Subsystem for Linux Documentation</a>.</li>
<li><a href="https://www.sitepoint.com/wsl2/">Windows Subsystem for Linux 2: The Complete Guide for Windows 10 &amp; 11</a>.</li>
<li><a href="https://code.visualstudio.com/docs/remote/wsl-tutorial">Remote development in WSL</a>.</li>
<li><a href="https://towardsdatascience.com/how-to-create-perfect-machine-learning-development-environment-with-wsl2-on-windows-10-11-2c80f8ea1f31">How to Create a Perfect Machine Learning Development Environment With WSL2 on Windows 10/11</a>.</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Create Machine Learning Development Environment on Windows 11</title>
      <link>http://visionbike.github.io/posts/create-ml-development-environment-on-window11/</link>
      <pubDate>Thu, 06 Jul 2023 12:41:36 +0800</pubDate>
      
      <guid>http://visionbike.github.io/posts/create-ml-development-environment-on-window11/</guid>
      <description>In this post, I will cover the setup of machine learning development environment on both Windows 11. I assume that you have a CUDA-compatible GPU alredy installed on your PC.
To ensure a smooth setup process, it is crucial that you follow the steps in the specified order. Let&amp;rsquo;s begin with the software installations:
 NVIDIA Drivers. Microsoft Visual Studio 2022 (Community version). NVIDIA CUDA Toolkit. NVIDIA cuDNN. Mambaforge (similar to Anaconda for Python).</description>
      <content:encoded><![CDATA[<p>In this post, I will cover the setup of machine learning development environment on both Windows 11. I assume that you have a CUDA-compatible GPU alredy installed on your PC.</p>
<p>To ensure a smooth setup process, it is crucial that you follow the steps in the specified order. Let&rsquo;s begin with the software installations:</p>
<ul>
<li>NVIDIA Drivers.</li>
<li>Microsoft Visual Studio 2022 (Community version).</li>
<li>NVIDIA CUDA Toolkit.</li>
<li>NVIDIA cuDNN.</li>
<li>Mambaforge (similar to Anaconda for Python).</li>
</ul>
<p>However, if you previously had NVIDIA drivers installed on your computer, it is essential to uninstall all NVIDIA applications before proceeding further. To uninstall the NVIDIA applications, follow these steps:</p>
<ol>
<li>Open the &ldquo;Install Apps&rdquo; on your Windows 11 PC.</li>
<li>Scroll down untill you find NVIDIA applications. <img loading="lazy" src="/posts/create-ml-development-environment-on-window11/nvidia-apps-list.png" type="" alt="NVIDIA apps list"  /></li>
<li>Click to &ldquo;&hellip;&rdquo; button on the right and uninstall all NVIDIA GPU drivers and any associated software. <img loading="lazy" src="/posts/create-ml-development-environment-on-window11/nvidia-app-uninstall.png" type="" alt="NVIDIA app uninstall"  /></li>
</ol>
<h2 id="1-install-nvida-drivers">1. Install NVIDA Drivers</h2>
<p>To install the latest NVIDA drivers on Windows,  you can utilize <a href="https://www.nvidia.com/en-gb/geforce/geforce-experience/"><strong>GeForce Experience</strong></a>, which ease the installation process.</p>
<p>Once you have completed downloading <strong>GeForce Experience</strong>, launch it and you can get start.</p>
<div class="admonition info"><p class="admonition-title">Info</p>
<p>Upon launching, you will be prompted to log in to your <strong>NVIDIA account</strong>. If you don&rsquo;t have an account already, you can create one.</p>
</div>
<p>There are two options for the installation:</p>
<ul>
<li><strong>Experess Installation</strong>: This option will automatically determine which drivers you need and then install them without requesting permission.</li>
<li><strong>Custom Installation</strong>: This option gives you more control over the installation process. You can choose additional options and settings based on your preferences. Furthermore, a &lsquo;clean installation&rsquo; option may be presented, allowing you to restore all settings to their default values and remove any previously created profiles. <img loading="lazy" src="/posts/create-ml-development-environment-on-window11/nvidia-custom-install.jpg" type="" alt="NVIDIA custom install"  /></li>
</ul>
<p>After the installation is complete, your NVIDIA graphics card drivers will be set up on your Windows system.</p>
<h2 id="2-install-visual-studio-2022-community">2. Install Visual Studio 2022 Community</h2>
<p>Visual Studio is required for the installation of the NVIDIA CUDA Toolkit. If you try to install NVIDIA CUDA Toolkit for Windows without installing Visual Studio, you will get the following error when downloading CUDA Toolkit.</p>
<p>You can install the latest version of <a href="https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=Community">Visual Studio Community</a>, selecting the <strong>Desktop development with C++</strong> workload shown in the image below. <img loading="lazy" src="/posts/create-ml-development-environment-on-window11/visual-studio-install.png" type="" alt="Visual Studio Install"  /></p>
<p>If you already have an installation ensure that the correct workload is installed and that you have updated to the latest version.</p>
<h2 id="3-install-nvidia-cuda-toolkit">3. Install NVIDIA CUDA Toolkit.</h2>
<p>To get the latest version of NVIDIA CUDA Toolkit, you can visit the <a href="https://developer.nvidia.com/cuda-downloads">NVIDIA Developer website for CUDA Toolkit</a>. You can also download previous versions from the <a href="https://developer.nvidia.com/cuda-toolkit-archive">Archive of Previous CUDA Releases</a> under the Resources section on the same page given above.</p>
<p>On the CUDA Toolkit dowload page, choose the appropriate CUDA Toolkit version based on your operating system (Windows) and architecture (x86_64 for most systems). <img loading="lazy" src="/posts/create-ml-development-environment-on-window11/download-cuda-toolkit.png" type="" alt="Download CUDA Toolkit"  /></p>
<p>Once the download is complete, locate the downloaded CUDA Toolkit installer file and double-click on it to start the installation process. Follow the on-screen instructions provided by the installer.</p>
<ul>
<li>Choose the installation location on your system.</li>
<li>Select the components you want to install. It is recommended to include the CUDA Toolkit, CUDA Samples, and CUDA Visual Studio Integration if you are using Visual Studio for development.</li>
<li>Choose the appropriate options based on your preferences during the installation process.</li>
</ul>
<p><img loading="lazy" src="/posts/create-ml-development-environment-on-window11/nvidia-cuda-toolkit-install.png" type="" alt="NVIDIA CUDA Toolkit install"  /></p>
<p>After the installation is complete, you may need to set up environment variables to ensure that your system recognizes the CUDA Toolkit.</p>
<ul>
<li>Open the Start menu and search for &ldquo;Environment Variables&rdquo;.</li>
<li>Select &ldquo;Edit the system environment variables&rdquo;.</li>
<li>In the System Properties window, click on the &ldquo;Environment Variables&rdquo; button.</li>
<li>Under &ldquo;System variables&rdquo;, click on &ldquo;New&rdquo; to add a new variable.</li>
<li>Set the variable name as <code>CUDA_PATH</code> and the variable value as the installation path of the CUDA Toolkit (e.g., <code>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v&lt;version&gt;</code>). <img loading="lazy" src="/posts/create-ml-development-environment-on-window11/nvidia-cuda-path.png" type="" alt="NVIDIA CUDA path"  /></li>
</ul>
<div class="admonition info"><p class="admonition-title">Verify Installation</p>
<p>You can verify the installation by opening a command prompt and running the following command.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ps" data-lang="ps"><span class="nf">nvcc</span> <span class="nf">--version</span>
</code></pre></div><p>If the installation was successful, you should see the CUDA version information displayed.</p>
</div>
<p>The NVIDIA CUDA Toolkit is now installed on your system. This toolkit provides the necessary libraries, compilers, and tools for developing and running CUDA-accelerated applications and machine learning models.</p>
<h2 id="3-install-nvidia-cudnn">3. Install NVIDIA cuDNN</h2>
<p>uDNN (CUDA Deep Neural Network Library) is a GPU-accelerated library developed by NVIDIA specifically designed and colaborated withNVIDA CUDA Toolkit to accelerate deep neural network computations. By utilizing cuDNN, deep learning frameworks can leverage the parallel processing capabilities of NVIDIA GPUs, leading to significant speed improvements in training and inference of deep neural networks.</p>
<p>To download the latest version of NVIDIA cuDNN, you can visit <a href="https://developer.nvidia.com/rdp/cudnn-download">NVIDIA Developer website for CUDA cuDNN</a>. On the cuDNN page, you will need to create or log in to your NVIDIA Developer account in order to access the cuDNN download files. If you don&rsquo;t have an account, you can create one for free.</p>
<p>Once you are logged in, choose the appropriate cuDNN version based on your CUDA Toolkit version and operating system. Make sure to select the version that is compatible with your installed CUDA Toolkit.</p>
<p><img loading="lazy" src="/posts/create-ml-development-environment-on-window11/download-cudnn.png" type="" alt="Download cuDNN"  /></p>
<p>After the download is complete, locate the downloaded cuDNN package file and extract its contents to a desired location on your system. The extracted package will contain several files and folders, including the <code>bin</code>, <code>include</code>, and <code>lib</code> directories.</p>
<p><img loading="lazy" src="/posts/create-ml-development-environment-on-window11/nvidia-cudnn.png" type="" alt="NVIDIA cuDNN"  /></p>
<p>Copy these folder from the extracted cuDNN package to the corresponding directories in your CUDA Toolkit installation, i.e., <code>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v&lt;version&gt;</code>.</p>
<p>After copying the files, cuDNN is successfully installed and integrated with your CUDA Toolkit.</p>
<p>Finally, You need to set the variable name as <code>CUDNN</code> and the variable value as the installation paths of the cuDNN folders. You also add these path to &ldquo;System variables&rdquo;&rsquo;s Path</p>
<p><img loading="lazy" src="/posts/create-ml-development-environment-on-window11/cudnn-paths.png" type="" alt="cuDNN paths"  /></p>
<h2 id="4-install-mambaforge-for-windows">4. Install Mambaforge for Windows</h2>
<p><a href="https://mamba.readthedocs.io/en/latest/index.html">Mambaforge</a> is a distribution of the Python programming language that serves as an alternative to Anaconda. It provides a comprehensive environment for scientific computing and data science, offering a collection of pre-installed packages commonly used in these domains.</p>
<p>Mambaforge is designed to facilitate package management and create isolated Python environments for different projects.</p>
<p>You can download the Windows version from <a href="https://github.com/conda-forge/miniforge#mambaforge">this link</a> and start installing.</p>
<p>Once the installation is complete, add the Mambaforge installation directory to the &ldquo;User Variable&rdquo;&rsquo;s Path.</p>
<p><img loading="lazy" src="/posts/create-ml-development-environment-on-window11/mambaforge-paths.png" type="" alt="Mambaforge paths"  /></p>
<div class="admonition info"><p class="admonition-title">Verify Installation</p>
<p>You can verify the installation by opening a command prompt and running the following command.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ps" data-lang="ps"><span class="nf">mamba</span> <span class="nf">--version</span>
</code></pre></div><p>If the installation was successful, you should see the Mambaforge version information displayed.</p>
</div>
<h2 id="conclusion">Conclusion</h2>
<p>By following these steps and installing the required software, you will have a machine learning development environment set up on your Windows 11 system. This environment will provide the necessary tools and libraries for GPU-accelerated computing and Python package management.</p>
<h2 id="reference">Reference</h2>
<ul>
<li><a href="https://medium.com/geekculture/install-cuda-and-cudnn-on-windows-linux-52d1501a8805">Install CUDA and CUDNN on Windows &amp; Linux</a>.</li>
<li><a href="https://medium.com/@Gunter-Pearson/installing-latest-tensorflow-version-with-cuda-cudnn-and-gpu-support-on-windows-11-pc-e41fac5c5795">Installing Latest TensorFlow version with CUDA, cudNN and GPU support on Windows 11 PC</a>.</li>
<li>Microsoft Visual Studio: <a href="https://visualstudio.microsoft.com/free-developer-offers/">https://visualstudio.microsoft.com/free-developer-offers/</a>.</li>
<li>NVIDIA CUDA Toolkit: <a href="https://developer.nvidia.com/cuda-toolkit">https://developer.nvidia.com/cuda-toolkit</a>.</li>
<li>NVIDIA cuDNN: <a href="https://developer.nvidia.com/cudnn">https://developer.nvidia.com/cudnn</a>.</li>
<li>Mambaforge: <a href="https://github.com/conda-forge/miniforge#mambaforge">https://github.com/conda-forge/miniforge#mambaforge</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Create Personal Blog With Hugo and GitHub Pages</title>
      <link>http://visionbike.github.io/posts/create-personal-blog-with-hugo-and-gh-pages/</link>
      <pubDate>Tue, 04 Jul 2023 01:53:57 +0800</pubDate>
      
      <guid>http://visionbike.github.io/posts/create-personal-blog-with-hugo-and-gh-pages/</guid>
      <description>Creating a personal blog with technical content is a excellent way to enhance your writting skill, take your notes and share your experience with others on the Internet. Ideally, we should have following goals when creating and mantaining a blog:
 No/Low-cost - Free or as close to free as posisble. Productive - Easy to write in and maintain. Cloud Native - Utilizes public cloud services for hosting, allowing for infinite scaling.</description>
      <content:encoded><![CDATA[<p>Creating a personal blog with technical content is a excellent way to enhance your writting skill, take your notes and share your experience with others on the Internet.
Ideally, we should have following goals when creating and mantaining a blog:</p>
<ol>
<li><strong>No/Low-cost</strong> - Free or as close to free as posisble.</li>
<li><strong>Productive</strong> - Easy to write in and maintain.</li>
<li><strong>Cloud Native</strong> - Utilizes public cloud services for hosting, allowing for infinite scaling.</li>
</ol>
<p>After researching, I found that using <strong>Markdown</strong>,  <strong>Hugo</strong> and <strong>GitHub Pages</strong>  is indeed a powerful combination for creating and maintaining a cost-effective, productive, and cloud-native blog:</p>
<ul>
<li><a href="https://daringfireball.net/projects/markdown/"><strong>Markdown</strong></a> - A markup language that is extremely easy to read, write natively and can be converted into HTML.</li>
<li><a href="https://gohugo.io/"><strong>Hugo</strong></a> - A static site generator written in the Go language that allows for content written in Markdown to be rendered into HTML webpages.</li>
<li><a href="https://pages.github.com/"><strong>GitHub Pages</strong></a> - A GitHub service that hosts web content (such as HTML webpages) stored in a GitHub repository.</li>
</ul>
<p>In this post, I will show how to create your own blog for FREE using above technologies. The blog is built using an Linux operating system host (including Window Subsystem for Linux - WSL as in my case).</p>
<p>Here&rsquo;s an outline of the steps you can follow to create your own blog using these technologies:</p>
<h2 id="1-set-up-github-account">1. Set up GitHub Account</h2>
<p>If you don&rsquo;t have one already, creating a GitHub account. GitHub Pages allows you to host your blog for free using a GitHub repository.</p>
<h2 id="2-install-hugo">2. Install Hugo</h2>
<p>Before starting, make sure <code>git</code> is install in your local machine.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">sudo apt install git
</code></pre></div><p>Open a terminal and configure Git with your name and email address.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">git config --global user.name <span class="s2">&#34;Your Name&#34;</span>
git config --global user.email <span class="s2">&#34;your.email@example.com&#34;</span>
</code></pre></div><p>To verify that Git has been installed successfully, you can check the version using <code>git --version</code>. This command will display the installed version of Git.</p>
<p>Now, install Hugo on your Linux operating system host. For Ubuntu user, you can follow this commands.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">sudo apt install hugo
</code></pre></div><p>For verification, run this command:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">hugo version
</code></pre></div><p>The Hugo version should be shown if the installation is successfull.</p>
<h2 id="3-create-a-new-hugo-site">3. Create a new Hugo site</h2>
<p>Use <code>hugo new site</code> command to create a new Hugo site:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">hugo new site &lt;USERNAME&gt;-hugo -f yml
</code></pre></div><p>This will set up the basic directory structure and configuration file (<code>*.yml</code> format) for your blog. This site will be associated with a GitHub repository where you can store the source code of your blog.</p>
<div class="admonition tip"><p class="admonition-title">What is `&lt;USENAME&gt;`</p>
<p>For convenient management and organization, you should name the your site as above format with <code>&lt;USERNAME&gt;</code> as the your GitHub&rsquo;s username, i.e., <code>visionbike-hugo</code>. It&rsquo;s a helpful tip for keeping track of your projects and ensuring clarity when managing multiple repositories.</p>
</div>
<p>Initialize git in the local site for further use.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">cd</span> &lt;USERNAME&gt;-hugo
git init
</code></pre></div><p>After creating the Hugo site, it&rsquo;s important to associate it with a GitHub repository. You need to create a new repository on GitHub for your blog&rsquo;s source code.</p>
<p><img loading="lazy" src="/posts/create-personal-blog-with-hugo-and-gh-pages/create-source-code-repo.png" type="" alt="Create source code repository"  /></p>
<div class="admonition tip"><p class="admonition-title">Creating Github Repository Without README</p>
<p>By creating a repository without a <code>README</code> file, you can avoid accidental history conflicts when pushing your local project to a fresh repository. You can always add a <code>README</code> file later if needed.</p>
</div>
<p>Now, link the local site to the GitHub repository by using <code>remote</code> command:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">git remote add origin https://github.com/&lt;USERNAME&gt;/&lt;USERNAME&gt;.github.io.git
git banrch -M master
</code></pre></div><p>Replace <code>&lt;USERNAME&gt;</code> with your GitHub&rsquo;s username.</p>
<p>By completing these steps, you have linked your local Hugo site to the GitHub repository. Now you can continue working on your site locally, commit your changes, and push them to the remote repository when ready.</p>
<h2 id="4-install-hugo-theme">4. Install Hugo Theme</h2>
<p>nstalling a Hugo theme is a fantastic way to personalize your blog and enhance its visual appeal. You can access free Hugo themes via <a href="https://themes.gohugo.io/">this website</a>.</p>
<p>For my blog, I select the <a href="https://github.com/reorx/hugo-PaperModX"><strong>PaperModX</strong></a> theme because of its style and awesome features. To use the theme, I will add its source code by <code>git submodule</code> command.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">git submodule add --depth <span class="m">1</span> https://github.com/reorx/hugo-PaperModX themes/PaperModX
</code></pre></div><p>This command adds the <strong>PaperModX</strong> theme repository as a submodule in the <code>themes/PaperModX</code> directory of your Hugo site.</p>
<div class="admonition tip"><p class="admonition-title">Updating submodules</p>
<p>If you have already added the submodule before, you can run the following command to reclone it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">git submodule update --init --recursive
</code></pre></div><p>For updating the theme, run this command.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">git submodule update --remote --merge
</code></pre></div></div>
<h2 id="5-modify-hugo-configuration">5. Modify Hugo Configuration</h2>
<p>Once you have added the theme, you can configure it in your Hugo site&rsquo;s configuration file (<code>config.toml</code> or <code>config.yml</code>). Refer to the theme&rsquo;s documentation for specific instructions on customization and configuration options. You will most likely want to modify the following fields:</p>
<ul>
<li>
<p><strong>baseURL</strong>: This should be set to the URL GitHub Pages will use to host your blog, which will depend on the name of the GitHub repository you created. If the GitHub repository is named <code>&lt;USERNAME&gt;.github.io</code>, then the value of baseURL will be <code>https://&lt;USERNAME&gt;.github.io/</code>. If the GitHub repository has any other name, then the value of baseURL will be <code>https://&lt;USERNAME&gt;.github.io/&lt;REPOSITORY_NAME&gt;/</code>.</p>
<ul>
<li>For example, my GitHub username is <code>visionbike</code>. If the GitHub repository is named <code>visionbike.github.io</code>, then the value of baseURL will be <code>https://visionbike.github.io/</code>.</li>
<li>For example, my GitHub username is <code>visionbike</code>. If the GitHub repository is named <code>visionbike-hugo</code>, then the value of baseURL will be <code>https://visionbike.github.io/visionbike-hugo/</code>.</li>
</ul>
</li>
<li>
<p><strong>title</strong>: This will be the title of your blog site as it appears at the top of a visitorâ€™s web browser when your site is open. It will also appear underneath your avatar, if one is present.</p>
</li>
<li>
<p><strong>theme</strong>: The name of the theme Hugo should use to render your site. In my example, this will be set to <code>PaperModX</code>, since that is the name of the theme I am using.</p>
</li>
</ul>
<p>Example contents of a valid <code>config.yml</code> file can be found below.</p>
<details class="admonition quote"><summary class="admonition-title">config.yml</summary>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="c"># base URL</span><span class="w">
</span><span class="w"></span><span class="nt">baseURL</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;http://visionbike.github.io/&#34;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c"># site title</span><span class="w">
</span><span class="w"></span><span class="nt">title</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Visionbike - Personal Blog of CV | DSP | ML notes&#34;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c"># paginate</span><span class="w">
</span><span class="w"></span><span class="nt">paginate</span><span class="p">:</span><span class="w"> </span><span class="m">5</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c"># theme config</span><span class="w">
</span><span class="w"></span><span class="nt">theme</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;PaperModX&#34;</span><span class="w">
</span><span class="w"></span><span class="nt">themesdir</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;themes&#34;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c"># global config</span><span class="w">
</span><span class="w"></span><span class="nt">enableInlineShortcodes</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w"></span><span class="nt">enableRobotsTXT</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w"></span><span class="nt">buildDrafts</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span><span class="w"></span><span class="nt">buildFuture</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span><span class="w"></span><span class="nt">buildExpired</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span><span class="w"></span><span class="nt">enableEmoji</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c"># css minify for speeding up site</span><span class="w">
</span><span class="w"></span><span class="nt">minify</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">disableXML</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w">  </span><span class="nt">minifyOutput</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c"># site param config</span><span class="w">
</span><span class="w"></span><span class="nt">params</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="c"># environment</span><span class="w">
</span><span class="w">  </span><span class="nt">env</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;production&#34;</span><span class="w">
</span><span class="w">  </span><span class="nt">description</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Visionbike - Personal Blog of CV | DSP | ML notes&#34;</span><span class="w">
</span><span class="w">
</span><span class="w">  </span><span class="c"># color scheme: auto, dark, light</span><span class="w">
</span><span class="w">  </span><span class="nt">defaultTheme</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;dark&#34;</span><span class="w">
</span><span class="w">  </span><span class="nt">disableThemeToggle</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w">
</span><span class="w">  </span><span class="c"># header logo</span><span class="w">
</span><span class="w">  </span><span class="nt">logo</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">text</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Visionbike&#34;</span><span class="w">
</span><span class="w">    </span><span class="nt">icon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;images/apple-touch-icon.png&#34;</span><span class="w">
</span><span class="w">    </span><span class="nt">iconHeight</span><span class="p">:</span><span class="w"> </span><span class="m">35</span><span class="w">
</span><span class="w">    </span><span class="nt">iconWidth</span><span class="p">:</span><span class="w"> </span><span class="m">35</span><span class="w">
</span><span class="w">
</span><span class="w">  </span><span class="c"># profile-mode</span><span class="w">
</span><span class="w">  </span><span class="nt">profileMode</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w">    </span><span class="nt">title</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Phuc Thanh-Thien Nguyen&#34;</span><span class="w">
</span><span class="w">    </span><span class="nt">subtitle</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;AI Researcher - Personal Blog of CV | DSP | ML notes&#34;</span><span class="w">
</span><span class="w">    </span><span class="nt">imageUrl</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;images/avatar-3d.png&#34;</span><span class="w">
</span><span class="w">    </span><span class="nt">imageTitle</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;avatar-3d&#34;</span><span class="w">
</span><span class="w">    </span><span class="nt">imageWidth</span><span class="p">:</span><span class="w"> </span><span class="m">180</span><span class="w">
</span><span class="w">    </span><span class="nt">imageHeight</span><span class="p">:</span><span class="w"> </span><span class="m">180</span><span class="w">
</span><span class="w">    </span><span class="nt">buttons</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Archives</span><span class="w">
</span><span class="w">        </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">/archives/</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Tags</span><span class="w">
</span><span class="w">        </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="l">/tags/</span><span class="w">
</span><span class="w">  </span><span class="c"># home-info-mode</span><span class="w">
</span><span class="w">  </span><span class="nt">homeInfoParams</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">title</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Phuc Thanh-Thien Nguyen&#34;</span><span class="w">
</span><span class="w">    </span><span class="nt">content</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;AI Researcher - Personal Blog of CV | DSP | ML notes&#34;</span><span class="w">
</span><span class="w">
</span><span class="w">  </span><span class="c"># home social icons</span><span class="w">
</span><span class="w">  </span><span class="nt">socialIcons</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">github</span><span class="w">
</span><span class="w">      </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;https://github.com/visionbike/&#34;</span><span class="w">
</span><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">linkedIn</span><span class="w">
</span><span class="w">      </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;https://linkedin.com/in/nttphuc/&#34;</span><span class="w">
</span><span class="w">
</span><span class="w">  </span><span class="c"># post config</span><span class="w">
</span><span class="w">  </span><span class="nt">author</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Visionbike&#34;</span><span class="w">
</span><span class="w">  </span><span class="nt">showCodeCopyButtons</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w">  </span><span class="nt">displayFullLangName</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w">  </span><span class="nt">showReadingTime</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w">  </span><span class="nt">showWordCount</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w">  </span><span class="nt">showPostNavLinks</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w">  </span><span class="nt">showBreadCrumbs</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w">  </span><span class="nt">enableImageZoom</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w">
</span><span class="w">  </span><span class="c"># assets images</span><span class="w">
</span><span class="w">  </span><span class="nt">assets</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="c"># disableFingerprinting: true</span><span class="w">
</span><span class="w">    </span><span class="nt">favicon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;images/favicon.ico&#34;</span><span class="w">
</span><span class="w">    </span><span class="nt">favicon16x16</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;images/favicon-16x16.png&#34;</span><span class="w">
</span><span class="w">    </span><span class="nt">favicon32x32</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;images/favicon-32x32.png&#34;</span><span class="w">
</span><span class="w">    </span><span class="nt">appleTouchIcon</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;images/apple-touch-icon.png&#34;</span><span class="w">
</span><span class="w">    </span><span class="nt">safarPinnedTab</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;images/safari-pinned-tab.svg&#34;</span><span class="w">
</span><span class="w">
</span><span class="w">  </span><span class="c"># search page</span><span class="w">
</span><span class="w">  </span><span class="nt">fuseOpts</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">isCaseSensitive</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span><span class="w">    </span><span class="nt">shouldSort</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w">    </span><span class="nt">location</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">
</span><span class="w">    </span><span class="nt">distance</span><span class="p">:</span><span class="w"> </span><span class="m">1000</span><span class="w">
</span><span class="w">    </span><span class="nt">threshold</span><span class="p">:</span><span class="w"> </span><span class="m">0.4</span><span class="w">
</span><span class="w">    </span><span class="nt">minMatchCharLength</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">
</span><span class="w">    </span><span class="nt">keys</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;title&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;permalink&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;summary&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;content&#34;</span><span class="p">]</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c"># laguage config</span><span class="w">
</span><span class="w"></span><span class="nt">languages</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">en</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">weight</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="w">    </span><span class="c"># language code</span><span class="w">
</span><span class="w">    </span><span class="nt">languageCode</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;en&#34;</span><span class="w">
</span><span class="w">    </span><span class="c"># determines default content language: &#34;en&#34;, &#34;zh-cn&#34;, &#34;fr&#34;, &#34;vi&#34;, ...</span><span class="w">
</span><span class="w">    </span><span class="nt">defaultContentLanguage</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;en&#34;</span><span class="w">
</span><span class="w">    </span><span class="c"># menu language</span><span class="w">
</span><span class="w">    </span><span class="nt">menu</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">main</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Posts&#34;</span><span class="w">
</span><span class="w">          </span><span class="nt">weight</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="w">          </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;/posts/&#34;</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Tags&#34;</span><span class="w">
</span><span class="w">          </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;/tags/&#34;</span><span class="w">
</span><span class="w">          </span><span class="nt">weight</span><span class="p">:</span><span class="w"> </span><span class="m">3</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Archive&#34;</span><span class="w">
</span><span class="w">          </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;/archives/&#34;</span><span class="w">
</span><span class="w">          </span><span class="nt">weight</span><span class="p">:</span><span class="w"> </span><span class="m">4</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Publish&#34;</span><span class="w">
</span><span class="w">          </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;/publish/&#34;</span><span class="w">
</span><span class="w">          </span><span class="nt">weight</span><span class="p">:</span><span class="w"> </span><span class="m">5</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;About&#34;</span><span class="w">
</span><span class="w">          </span><span class="nt">weight</span><span class="p">:</span><span class="w"> </span><span class="m">10</span><span class="w">
</span><span class="w">          </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;/about/&#34;</span><span class="w">
</span><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Search&#34;</span><span class="w">
</span><span class="w">          </span><span class="nt">weight</span><span class="p">:</span><span class="w"> </span><span class="m">100</span><span class="w">
</span><span class="w">          </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;/search/&#34;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c"># for search page</span><span class="w">
</span><span class="w"></span><span class="nt">outputs</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">home</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="l">HTML</span><span class="w">
</span><span class="w">    </span>- <span class="l">RSS</span><span class="w">
</span><span class="w">    </span>- <span class="l">JSON</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="c"># syntax highlight</span><span class="w">
</span><span class="w"></span><span class="nt">pygmentsUseClasses</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w"></span><span class="nt">pygmentsCodeFences</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w"></span><span class="nt">markup</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">goldmark</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">renderer</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">unsafe</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w">  </span><span class="nt">highlight</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">style</span><span class="p">:</span><span class="w"> </span><span class="l">doom-one2</span><span class="w">
</span><span class="w">    </span><span class="nt">lineNos</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span><span class="w">    </span><span class="nt">codeFences</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w">    </span><span class="nt">noClasses</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></code></pre></div></details>
<p>After modifying your <code>config.yml</code> file accordingly, use <code>git</code> to commit and push the changes from your local repository to GitHub.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">git add config.yml
git commit -m <span class="s2">&#34;modify configuration file&#34;</span>
git push -u origin master
</code></pre></div><h2 id="6-create-new-hugo-post">6. Create New Hugo Post</h2>
<p>That&rsquo;s a great step to create your first blog post using Hugo! To create your first post with the <code>hugo new</code> command, execute the following command in the terminal.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">hugo new posts/first-post/index.md
</code></pre></div><p>This command will create a new folder named <code>first-post</code> with new Markdown file <code>index.md</code> inside the <code>content/posts</code> directory. Creating a new directory for each single post helps you manage your resource better when images, media sources can be store directly in this directory. The Markdown file will contain the template for your first blog post and you can start  writing your content using Markdown syntax.</p>
<p>The contents of the <code>first-post.md</code> file will look something like this.</p>
<div class="admonition quote"><p class="admonition-title">first-post.md</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown">---
title: &#34;First Post&#34;
date: 2023-07-04T01:53:57+08:00
draft: true
---
</code></pre></div></div>
<p>To create your first blog post using Hugo, you need to add content to the Markdown file and update the metadata header. In the metadata header, you will find information such as the post&rsquo;s title (<code>title</code>), publishing date (<code>date</code>), and draft status (<code>draft</code>). Change the value of the <code>draft</code> field from <code>true</code> to <code>false</code> to indicate that the post is ready to be published on your blog site. Your can also add other features supported by the installed theme for your post, i.e., comments, share buttons, navigation, etc.</p>
<p>Next, add your desired content to the body of the post. In this case, you can include the line &ldquo;This is my first post! Hello world!&rdquo; at the bottom of the file. Feel free to customize the content to reflect your own thoughts and ideas in Markdown syntax.</p>
<p>After modifying your first blog post, you can use <code>git</code> to commit and push the changes from your local repository to GitHub.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">git add content/posts/first-post.md
git commit -m <span class="s2">&#34;add the first post&#34;</span>
git push -u origin master
</code></pre></div><div class="admonition quote"><p class="admonition-title">first-post.md</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown">---
title: &#34;First Post&#34;
date: 2023-07-04T01:53:57+08:00
draft: true
---
</code></pre></div></div>
<h2 id="7-test-hugo-configuration">7. Test Hugo Configuration</h2>
<p>Before hosting your blog to GitHub pages, letâ€™s ensure Hugo can parse the configuration file and build our new blog post successfully.</p>
<p>In your local machine, you can run <code>hugo server</code> command to serve your site locally.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">hugo server --disableFastRender
</code></pre></div><p>It will watch for any changes in your files and automatically rebuild your site whenever there are updates. Hugo will provide a local development server address, usually <code>http://localhost:1313</code>, where you can access your site.</p>
<p>To parse the configuration and build your site, you can simply run <code>hugo</code> command. If Hugo encounters any errors, they will be reported here. If the site is successfully built, then you will see output similar to the following.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">Start building sites â€¦ 
hugo v0.92.2+extended linux/amd64 <span class="nv">BuildDate</span><span class="o">=</span>2023-01-31T11:11:57Z <span class="nv">VendorInfo</span><span class="o">=</span>ubuntu:0.92.2-1ubuntu0.1

                   <span class="p">|</span> EN  
-------------------+-----
  Pages            <span class="p">|</span> <span class="m">13</span>  
  Paginator pages  <span class="p">|</span>  <span class="m">0</span>  
  Non-page files   <span class="p">|</span>  <span class="m">0</span>  
  Static files     <span class="p">|</span> <span class="m">18</span>  
  Processed images <span class="p">|</span>  <span class="m">0</span>  
  Aliases          <span class="p">|</span>  <span class="m">0</span>  
  Sitemaps         <span class="p">|</span>  <span class="m">1</span>  
  Cleaned          <span class="p">|</span>  <span class="m">0</span>  

Total in <span class="m">38</span> ms
</code></pre></div><h2 id="8-set-up-github-actions-workflow">8. Set Up GitHub Actions Workflow</h2>
<p>Lastly, we need to set up a GitHub Actions workflow for automatically building and deploying your blog to GitHub Pages. This workflow is defined by a YAML file in the <code>.github/workflows</code> directory structure at the root of the project. First, letâ€™s create this directory.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="go">mkdir -p .github/workflows
</span></code></pre></div><p>This command creates the <code>.github/workflows</code> directory if it doesn&rsquo;t already exist. The <code>-p</code> option ensures that the parent directories are created if needed.</p>
<p>Then, we will create a new file within the <code>.github/workflows</code> directory named <code>deploy_gh_pages.yaml</code> with the following contents.</p>
<div class="admonition quote"><p class="admonition-title">deploy_gh_pages.yaml</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nn">---</span><span class="w">
</span><span class="w"></span><span class="nn">---</span><span class="w">
</span><span class="w"></span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Deploy Hugo site via GitHub Pages</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="l">master</span><span class="w"> </span><span class="c"># Set a branch to deploy</span><span class="w">
</span><span class="w">  </span><span class="nt">pull_request</span><span class="p">:</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">deploy</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-22.04</span><span class="w">
</span><span class="w">    </span><span class="nt">permissions</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">contents</span><span class="p">:</span><span class="w"> </span><span class="l">write</span><span class="w">
</span><span class="w">    </span><span class="nt">concurrency</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">group</span><span class="p">:</span><span class="w"> </span><span class="l">${{ github.workflow }}-${{ github.ref }}</span><span class="w">
</span><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v3</span><span class="w">
</span><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">submodules</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w"> </span><span class="c"># Fetch Hugo themes (true OR recursive)</span><span class="w">
</span><span class="w">          </span><span class="nt">fetch-depth</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w"> </span><span class="c"># Fetch all history for .GitInfo and .Lastmod</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Setup Hugo</span><span class="w">
</span><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">peaceiris/actions-hugo@v2</span><span class="w">
</span><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">hugo-version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;latest&#34;</span><span class="w">
</span><span class="w">          </span><span class="nt">extended</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Build</span><span class="w">
</span><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">hugo --minify</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Deploy</span><span class="w">
</span><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">peaceiris/actions-gh-pages@v3</span><span class="w">
</span><span class="w">        </span><span class="c"># If you&#39;re changing the branch from main,</span><span class="w">
</span><span class="w">        </span><span class="c"># also change the `master` in `refs/heads/master`</span><span class="w">
</span><span class="w">        </span><span class="c"># below accordingly.</span><span class="w">
</span><span class="w">        </span><span class="nt">if</span><span class="p">:</span><span class="w"> </span><span class="l">github.ref == &#39;refs/heads/master&#39;</span><span class="w">
</span><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="nt">github_token</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.GITHUB_TOKEN }}</span><span class="w">
</span><span class="w">          </span><span class="nt">publish_dir</span><span class="p">:</span><span class="w"> </span><span class="l">./public</span><span class="w">
</span></code></pre></div></div>
<p>The YAML file defines the GitHub Actions workflow. It sets up the deployment process using Hugo and GitHub Pages. The workflow is triggered on a push to the <code>master</code> branch, and it uses the specified actions to build and deploy your blog.</p>
<p>You can see more in <a href="https://github.com/peaceiris/actions-gh-pages">this</a>.</p>
<p>After creating this file, use <code>git</code> to commit and push the changes from your local repository to GitHub.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="go">git add .github/workflows/deploy_gh_pages.yaml
</span><span class="go">git commit -m &#34;Add GitHub Actions workflow&#34;
</span><span class="go">git push -u origin master
</span></code></pre></div><h2 id="9-configure-github-pages">9. Configure GitHub Pages</h2>
<p>We need to set up the GitHub Pages component of our blog. This will allow GitHub to automatically build and serve our website whenever changes are made to the underlying repository.</p>
<p>First, create new branch named &ldquo;gh-page&rdquo;. This branch will be used by GitHub Pages to build and serve your website. You can create the branch using the branch creation feature in your GitHub repository.</p>
<p><img loading="lazy" src="/posts/create-personal-blog-with-hugo-and-gh-pages/create-gh-pages.png" type="" alt="Create gh-pages"  /></p>
<p>Then, go to the &ldquo;Settings&rdquo; tab near the top of your repository.</p>
<p><img loading="lazy" src="/posts/create-personal-blog-with-hugo-and-gh-pages/repository-setting.png" type="" alt="Repository setting"  /></p>
<p>In the left hand pane, locate and click on the &ldquo;Pages&rdquo; category.</p>
<p><img loading="lazy" src="/posts/create-personal-blog-with-hugo-and-gh-pages/gh-pages-setting.png" type="" alt="GitHub pages setting"  /></p>
<p>By default, GitHub Pages will be disabled for your repository. To enable it, we need to select a branch for GitHub Pages to build and serve our website from. Under the &ldquo;Source&rdquo; section in the middle pane, you will see a dropdown menu labeled &ldquo;None&rdquo;. Click on the dropdown menu and select the &ldquo;gh-pages&rdquo; branch. This tells GitHub Pages to build and serve your website from the &ldquo;gh-pages&rdquo; branch.</p>
<p><img loading="lazy" src="/posts/create-personal-blog-with-hugo-and-gh-pages/select-deployment-branch.png" type="" alt="Select deployment branch"  /></p>
<p>After selecting the deployment branch, you will see a notification indicating where your site will be published. It will provide you with a URL where your website can be accessed.</p>
<p><img loading="lazy" src="/posts/create-personal-blog-with-hugo-and-gh-pages/published-url.png" type="" alt="Published URL"  /></p>
<p>Wait for a few minutes to allow GitHub Pages to build and deploy your website. After the deployment is complete, you can click on the URL provided in the notification to view your website. It may take some time for the changes to propagate and for your website to become accessible.</p>
<p><img loading="lazy" src="/posts/create-personal-blog-with-hugo-and-gh-pages/site-demo.png" type="" alt="Site demo"  /></p>
<h2 id="conclusion">Conclusion</h2>
<p>Congratulations on setting up your blog using Hugo, Markdown, and GitHub Pages! This free and accessible solution enables you to create and share your technical knowledge with a wide audience. Happy blogging!</p>
<h2 id="reference">Reference</h2>
<ul>
<li>
<p><a href="https://chrisjhart.com/Creating-A-Simple-Free-Blog-Hugo/">How to Create a Simple, Free Blog with Hugo and GitHub Pages</a>.</p>
</li>
<li>
<p>PaperModX Hugo theme: <a href="https://github.com/reorx/hugo-PaperModX">https://github.com/reorx/hugo-PaperModX</a>.</p>
</li>
<li>
<p>Hugo: <a href="https://gohugo.io/">https://gohugo.io/</a>.</p>
</li>
<li>
<p>Even Hugo theme: <a href="https://github.com/olOwOlo/hugo-theme-even/">https://github.com/olOwOlo/hugo-theme-even/</a>.</p>
</li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
